;---------------------------------------------------------------------------------------------------------
; 说明： 脚本中的字符串区分大小写，用户可以修改"="后面的数值，但是不要修改前面的字符串
;---------------------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------
;      目标配置信息
;   debugenable = 1  可以在pc上看到rootfs盘符，方便调试, 串口开，但sdcard不支持
;               = 0  不可以在pc上看到rootfs盘符，串口关，可以支持sdcard
;----------------------------------------------------------------------------------
[target]
debugenable = 1

;----------------------------------------------------------------------------------
;      产品信息,  字符串长度必须小于等于32
;   id      = DEV_S003,  name    = ulive  为内部保留
;   DEV_S003表示开发板3号版， 也就是p3板
;----------------------------------------------------------------------------------
[product]
id      = DEV_S003
name    = ulive

[platform]
chip=0x02000000
pid =0x02000000
sid =0x02000100
bid =0x80

eraseflag   = 1
jtag        = 1

[fex_misc]
restore = 0

;------------------------------------------------------------------------------------------
;                                      系统配置
;------------------------------------------------------------------------------------------


;*****************************************************************************
;ddr3
;*****************************************************************************
[dram_para]
dram_baseaddr        	= 0x40000000
dram_clk             	=360
dram_type				= 3
dram_rank_num     		= 1
dram_chip_density		= 2048
dram_io_width			= 16
dram_bus_width    		= 32
dram_cas				= 6
dram_zq					= 0x7b
dram_odt_en				= 0
dram_size				= 512
dram_tpr0				= 0x30926692
dram_tpr1				= 0x1090
dram_tpr2				= 0x1a0c8
dram_tpr3				= 0x0
dram_tpr4				= 0x0
dram_tpr5				= 0x0
dram_emr1				= 0x0
dram_emr2				= 0x0
dram_emr3				= 0x0

;*****************************************************************************
;display  parameter
;*****************************************************************************
[display]
out_type            = 0

lcd_swap            = 0
lcd_x               = 800
lcd_y               = 480
lcd_dclk_div		= 8
sta_dly	            = 10
lcd_basic_valid     = 0
lcd_uf              = 0
lcd_vt              = 1050
lcd_ht              = 1055
lcd_vbp             = 34
lcd_hbp             = 215
lcd_if			    = 0
lcd_hv_if           = 0
lcd_hv_smode        = 0
lcd_hv_s888_if      = 0
lcd_hv_syuv_if      = 0
lcd_hv_vspw         = 0
lcd_hv_hspw         = 0
lcd_hv_lde_used     = 0
lcd_hv_lde_iovalue  = 0
lcd_cpu_if          = 0
lcd_io_cfg0         = 0x04000000
lcd_io_cfg1         = 0

[power]
;--------------------------------------------------------
; Bat_Cap注释:使用的电池容量,mAh表示.
; Discharge_current_Rate:如果无外部BAT--IPSOUT并联的PMOS,
; 此出为10;如果有,则为总电流除以AXP18X内部流过的电流再乘10.
; 如35表示BAT总电流是从AXP18X内部流过电流的3.5倍.初始可将此
; 处设置为10,然后进入监控界面看内部流过的电流,并用万用表量
; 测电池端实际总电流来获得参数值.
;--------------------------------------------------------
Battery_cap         = 2200
Discharge_current_rate = 10

[custom]
;-----------------------------------------------------------------------------
; data0   描述POWER相关信息
;         (00-07)power短按键发出的按键消息,查阅kmsg.h文件，注意进制,这里发出了"NUMBER8"
;         (08-11)描述power所使用的iic通道，默认是0，表示通道
;         (12-15)描述是否使用了power,没有使用将是0，否则是1。这里是1
;
;------------------------------------------------------------------------------
data0   = 0x1038
;-----------------------------------------------------------------------------
; data1   描述IIC相关信息
;         (00-03)描述是否使用了IIC控制器0，0表示没有，非0表示使用，这里是1，表示使用
;         (04-07)描述是否使用了IIC控制器1，0表示没有，非0表示使用，这里是0，表示未使用
;
;------------------------------------------------------------------------------
data1   = 0x01
;-----------------------------------------------------------------------------
; data2   描述KEY相关信息
;         (00-03)表示lradc的键值表,这里选择了0
;         (04-07)表示lradc的消息表,这里选择了0
;         (08-11)表示ir的消息表,这里选择了0
;         (12-15)表示ir的GPIO脚编组，这里使用了编组0
;         具体分配见驱动
;
;------------------------------------------------------------------------------
data2   = 0x0000
;-----------------------------------------------------------------------------
; data3   描述了CARD相关信息
;         (00-07)表示sd检测, 表示规则是高3bit表示GPIO组，低5bit表示在组内的序号
;         (08-15)表示ms检测, 当高3bit是0时候表示不需要检测
;         (16-19)表示sd卡的GPIO编组,通常只会是0
;         (20-23)表示sd卡是否需要使用写保护，0：不需要，1：需要
;         (24-31)表示sd卡写保护所使用到的gpio，表示规则是高3bit表示GPIO组，低5bit表示在组内的序号
;
;------------------------------------------------------------------------------
data3   = 0x44
;-----------------------------------------------------------------------------
; data4   描述了UART相关信息
;         (00-07)表示调试用串口的GPIO编组信息，高4位表示UART控制器编号，低4位表示引脚编号，通常是0
;         (08-15)表示通信用串口1的GPIO编组信息，高4位表示UART控制器编号，低4位表示引脚编号，通常是0
;         (16-23)表示通信用串口2的GPIO编组信息，高4位表示UART控制器编号，低4位表示引脚编号，通常是0
;         (24-32)表示通信用串口3的GPIO编组信息，高4位表示UART控制器编号，低4位表示引脚编号，通常是0
;          由于目前没有启动通信用串口，因此这里只需要管理调试用串口，别的地方写0xff
;
;------------------------------------------------------------------------------
data4   = 0xffffff00
;------------------------------------------------------------------------------
;-----------------------------------------------------------------------------
; data5   描述了AUDIO相关信息
;         (00-03)表示audio是否需要直驱, 0：不需要，非0：需要,这里启动了直驱
;         (04-07)表示是否允许使用SPDIF作为输出    0: 不允许  1：允许
;         (08-11)表示当使用spdif输出的时候，其GPIO引脚是哪一组  0: GPIOB08  ; 1: GPIOB15
;
;------------------------------------------------------------------------------
data5   = 0x01
;-----------------------------------------------------------------------------
; data6   描述了TP的相关信息
;         (00-03)表示是否使用了TP, 0：没有使用，非0:使用了TP
;         (04-11)描述所使用TP的类型
;         按照目前的情况，通常使用的是0
;         有少量存在x,y反向的屏，使用1
;
;------------------------------------------------------------------------------
data6   = 0x0000
;-----------------------------------------------------------------------------
; data7   描述了TIMER和RTC相关信息
;         (00-03)表示是否使用了RTC, 0：没有使用，1:使用了内部RTC, 2:使用了外部RTC, 这里使用了2
;         (04-07)描述是否使用了内部时钟，0：使用外部时钟， 1：使用内部时钟, 这里使用了0
;
;------------------------------------------------------------------------------
data7   = 0x11
;-----------------------------------------------------------------------------
; data8   描述了HDMI相关信息
;         (00-03)表示是否使用了HDMI, 0：没有使用，非0:使用了HDMI
;         (04-11)描述所使用HDMI的型号
;
;------------------------------------------------------------------------------
data8   = 0x00
;-----------------------------------------------------------------------------
; data9   描述了USB控制器0
;         参见D:\winners\ePDK\includes\elibs\libc\misc\pub0\usb_cfg_def.h
;
;------------------------------------------------------------------------------
data9   = 0x11000000
;-----------------------------------------------------------------------------
; data10   描述了USB控制器1
;
;------------------------------------------------------------------------------
data10  = 0
;-----------------------------------------------------------------------------
; data11   描述了FM相关信息
;         (00-03)表示是否使用了FM, 0：没有使用，非0:使用了FM
;         (04-11)描述所使用FM的型号
;          FM驱动暂时没有与配置相对应
;
;------------------------------------------------------------------------------
data11  = 0x00
;-----------------------------------------------------------------------------
; data12   描述了工作模式相关信息
;         (00-03)当前是PVP还是TVD, 0：PVP，1:TVD
;
;------------------------------------------------------------------------------
data12  = 0
;-----------------------------------------------------------------------------
; data13   描述了LED显示相关信息
;            data13可以控制一个IO作为LED显示控制
;            一个IO使用data13的00-15bit控制
;            bit0: 是否存在LED灯需要控制
;                0:   不存在
;                1:   存在控制
;            bit1: 系统启动后该灯的状态
;                0:   灭
;                1:   亮
;            bit2-3: 启动阶段该灯的状态
;                3:   保持当前状态
;                2:   闪烁状态
;                1:   亮
;                0:   灭
;            bit4-7: 闪烁的频率
;                0:   1s闪烁一次(灭，亮各0.5s)
;                1:   灭，亮各100ms
;                ..
;                n:   灭，亮各100ms * n
;                n最大不超过15
;            bit8-15: 表示这个灯所对应的GPIO
;                     表示规则是高3bit表示GPIO组，低5bit表示在组内的序号
;            bit16-31保留未使用
;------------------------------------------------------------------------------
data13  = 0
;-----------------------------------------------------------------------------
; data14   描述了显示(屏幕)背光控制相关信息
;           (00-07)表示了控制IO信息
;                  表示规则是高3bit表示GPIO组，低5bit表示在组内的序号
;                  如果是电源IC引脚，高三bit使用0x07,低5bit表示组内序号
;           (08-11)表示控制IO电平需要高还是低
;                  0: 保持控制IO电平为低
;                  1: 保持控制IO电平为高
;------------------------------------------------------------------------------
data14  = 0
;-----------------------------------------------------------------------------
; data15   描述了系统存储介质相关信息
;         (00-07)表示是否支持压缩存储 0：不支持，非0:支持
;         (08-15)描述所使用存储介质   0:nand  1:spinor  2:sdcard
;
;------------------------------------------------------------------------------
data15  = 0


;--------------------------------------------------------
; boot阶段使用的参数
;--------------------------------------------------------
[boot_extend]
hold_key_min  = 0xf0000000
hold_key_max  = 0xf0000000
vol_threshold = 3500


;--------------------------------------------------------------------------------------------------
;                                   固件下载参数配置
;--------------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
;										分区配置管理
;-----------------------------------------------------------------------------------------
;****************************************************
;    mbr的大小, 以Kbyte为单位
;****************************************************
[mbr]
size = 1024

;********************************************************************************************************
;                                              分区配置
;  当前分区的个数，默认有rootfs和userfs0两个分区，最大分区个数为7个.
;
;  [part_num]
;      num     = 2              ; //有2个分区
;      part0   = partiton0      ; //part0的信息存放在partiton0里
;      parti   = partitoni      ; //parti的信息存放在partitoni里
;
;  partition 定义范例:
;    [partition2]                ;   //第2个分区
;    class_name  = DISK         ;   //设备类名, 如："DISK"。 可参考"..\ePDK\includes\emod\sys_dev.h"
;    name        = USERFS2      ;   //设备节点名.  可参考"..\ePDK\includes\emod\sys_dev.h"
;    size_hi     = 0            ;   //分区大小的高32位, 单位: Kbyte.
;    size_lo     = 32           ;   //分区大小的低32位, 单位: Kbyte.
;
; 注：1、name唯一, 不允许同名
;     2、最大分区号为6
;     3、class_name和name最大12个字符
;     4、size_hi + size_lo = 0, 表示此分区不存在
;********************************************************************************************************
[part_num]
num     = 7

[partition0]
    class_name  = DISK
    name        = BOOTFS
    size_hi     = 0
    size_lo     =16384
    user_type   = 0
    ro          = 0

[partition1]
    class_name  = DISK
    name        = LROOTFS
    size_hi     = 0
    size_lo     =32768
    user_type   = 2
    ro  	    = 0
    
[partition2]
    class_name  = DISK
    name        = LSYSTEMFS
    size_hi     = 0
    size_lo     =131072
    user_type   = 2
    ro  	    = 0

[partition3]
    class_name  = DISK
    name        = LDATAFS
    size_hi     = 0
    size_lo     =262144
    user_type   = 2
    ro  	    = 0

[partition4]
    class_name  = DISK
    name        = MISC
    size_hi     = 0
    size_lo     =1024
    user_type   = 2
    ro  	    = 0

[partition5]
    class_name  = DISK
    name        = LRECOVERYFS
    size_hi     = 0
    size_lo     =32768
    user_type   = 2
    ro  	    = 0

[partition6]
    class_name  = DISK
    name        = LCACHEFS
    size_hi     = 0
    size_lo     =131072
    user_type   = 2
    ro  	    = 0

;********************************************************************************************************************
;                     固件包下载位置 ： 把某个固件包下载到指定分区, 下载次数最大为7次
;
;[downloadi]                                //固件包0下载位置
;    part_name      = SYSDATAFS             //分区名
;    pkt_name       = ROOTFS_000000000      //固件包名称
;    verify_file    = VERIFY_000000000      //校验文件名称
;
; 注：1、 downloadi 表示第i次下载固件, download 唯一, 请不要随意修改
;     2、 part_num 为分区号, 即固件下载的位置
;     3、 pkt_name 固件包名称. 最大长度为16byte, 且名称固定. 可参考"..\\ePDK\workspace\suni\liveclick\image.cfg"
;     4、 verify_file 为校验文件名称. 可参考"..\\ePDK\workspace\suni\liveclick\image.cfg"
;     5、 pkt_name 内容不填, 表示本次下载取消.  verify_file内容不填, 表示不需要校验.
;
; 如：要把固件包zdisk.img, 下载在到SYSDATAFS分区里。其配置为：
; [download0]
;      part_name   = SYSDATAFS
;      pkt_name     = ROOTFS_000000000
;      verify_file  = VERIFY_000000000
;********************************************************************************************************************
[down_num]
down_num    = 5

[download0]
part_name   = BOOTFS
pkt_name    = BOOTFS_000000000
encrypt     = 0 
verify_file = VBOOTFS_00000000
                 
[download1]      
part_name   = LROOTFS
pkt_name    = LROOTFS_00000000
encrypt     = 0  
verify_file = VROOTFS_00000000
                 
[download2]      
part_name   = LSYSTEMFS
pkt_name    = LSYSTEMFS_000000
encrypt     = 0  
verify_file = VSYSTEMFS_000000

[download3]  
part_name   = LRECOVERYFS
pkt_name    = LRECOVERYFS_0000
encrypt     = 0  
verify_file = VRECOVERYFS_0000

[download4]
part_name   = UDISK
pkt_name    = DISKFS_000000000
encrypt     = 0
 
